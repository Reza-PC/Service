(function(exports) {
  'use strict';

  exports.toJalaali = toJalaali;
  exports.toGregorian = toGregorian;
  exports.isValidJalaaliDate = isValidJalaaliDate;
  exports.isLeapJalaaliYear = isLeapJalaaliYear;
  exports.jalaaliMonthLength = jalaaliMonthLength;
  exports.jwday = jwday;

  var breaks = [ 
    -61, 9, 38, 199, 426, 686, 756, 818, 1111, 1181,
    1210, 1635, 2060, 2097, 2192, 2262, 2324, 2394,
    2456, 3178
  ];

  function mod(a, b) {
    return a - b * Math.floor(a / b);
  }

  function div(a, b) {
    return Math.floor(a / b);
  }

  function toJalaali(gy, gm, gd) {
    var j = d2j(g2d(gy, gm + 1, gd));
    return { jy: j.jy, jm: j.jm - 1, jd: j.jd };
  }

  function toGregorian(jy, jm, jd) {
    var g = d2g(j2d(jy, jm + 1, jd));
    return { gy: g.gy, gm: g.gm - 1, gd: g.gd };
  }

  function isValidJalaaliDate(jy, jm, jd) {
    return jy >= -61 && jy <= 3177 &&
           jm >= 0 && jm <= 11 &&
           jd >= 1 && jd <= jalaaliMonthLength(jy, jm);
  }

  function isLeapJalaaliYear(jy) {
    return jalCal(jy).leap === 0;
  }

  function jalaaliMonthLength(jy, jm) {
    if (jm < 6) return 31;
    if (jm < 11) return 30;
    if (isLeapJalaaliYear(jy)) return 30;
    return 29;
  }

  function jalCal(jy) {
    var bl = breaks.length,
        gy = jy + 621,
        leapJ = -14,
        jp = breaks[0],
        jm,
        jump,
        leap,
        n,
        i;

    if (jy < jp || jy >= breaks[bl - 1])
      throw new Error('Invalid Jalaali year ' + jy);

    for (i = 1; i < bl; i += 1) {
      jm = breaks[i];
      jump = jm - jp;
      if (jy < jm)
        break;
      leapJ = leapJ + div(jump, 33) * 8 + div(mod(jump,33), 4);
      jp = jm;
    }

    var n = jy - jp;
    leapJ = leapJ + div(n, 33) * 8 + div(mod(n,33) + 3, 4);
    if (mod(jump,33) === 4 && jump - n === 4)
      leapJ += 1;

    var leapG = div(gy, 4) - div((div(gy,100)+1)*3, 4) - 150;

    var march = 20 + leapJ - leapG;

    if (jump - n < 6)
      n = n - jump + div(jump + 4, 33) * 33;

    leap = mod(mod(n + 1, 33) - 1, 4);
    if (leap === -1) leap = 4;

    return { leap: leap, gy: gy, march: march };
  }

  function j2d(jy, jm, jd) {
    var r = jalCal(jy);
    return g2d(r.gy, 3, r.march) + (jm - 1) * 31 - div(jm, 7) * (jm - 7) + jd - 1;
  }

  function d2j(jdn) {
    var gy = d2g(jdn).gy,
        jy = gy - 621,
        r = jalCal(jy),
        jdn1f = g2d(gy, 3, r.march),
        k = jdn - jdn1f;
    if (k >= 0) {
      if (k <= 185) {
        var jm = 1 + div(k, 31);
        var jd = mod(k, 31) + 1;
        return { jy: jy, jm: jm, jd: jd };
      } else {
        k -= 186;
      }
    } else {
      jy -= 1;
      r = jalCal(jy);
      k += 179;
      if (r.leap === 1) k += 1;
    }
    var jm = 7 + div(k, 30);
    var jd = mod(k, 30) + 1;
    return { jy: jy, jm: jm, jd: jd };
  }

  function g2d(gy, gm, gd) {
    var d = div((gy + div(gm - 8, 6) + 100100) * 1461, 4) +
            div(153 * mod(gm + 9, 12) + 2, 5) +
            gd - 34840408;
    d = d - div(div(gy + 100100 + div(gm - 8, 6), 100) * 3, 4) + 752;
    return d;
  }

  function d2g(jdn) {
    var j = 4 * jdn + 139361631;
    j = j + div(div(4 * jdn + 183187720, 146097) * 3, 4) * 4 - 3908;
    var i = div(mod(j, 1461), 4) * 5 + 308;
    var gd = div(mod(i, 153), 5) + 1;
    var gm = mod(div(i, 153), 12) + 1;
    var gy = div(j, 1461) - 100100 + div(8 - gm, 6);
    return { gy: gy, gm: gm, gd: gd };
  }

  function jwday(jy, jm, jd) {
    var g = toGregorian(jy, jm, jd);
    return (g2d(g.gy, g.gm + 1, g.gd) + 1) % 7;
  }

})(typeof exports === 'undefined' ? this.jalaali = {} : exports);
